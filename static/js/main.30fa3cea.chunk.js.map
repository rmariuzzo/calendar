{"version":3,"sources":["Calendar.tsx","App.tsx","index.tsx"],"names":["CalendarContainer","styled","div","CalendarControls","unit","CalendarControlsMonth","CalendarDates","ul","CalendarDate","li","props","inMonth","today","Calendar","useState","Date","month","setMonth","now","start","startOfWeek","startOfMonth","weekStartsOn","end","addWeeks","endOfWeek","endOfMonth","getWeeksInMonth","dates","eachDayOfInterval","onClick","subMonths","format","addMonths","map","date","key","getTime","isSameMonth","isSameDay","getDate","GlobalStyle","createGlobalStyle","App","rootElement","document","getElementById","render"],"mappings":"o5CAkBA,MAGMA,EAAoBC,IAAOC,IAAV,IAHV,IAYPC,EAAmBF,IAAOC,IAAV,IAXCE,GADV,GACUA,IAyBjBC,EAAwBJ,IAAOC,IAAV,IA1Bd,IA+BPI,EAAgBL,IAAOM,GAAV,KAWbC,EAAeP,IAAOQ,GAAV,IACJ,IAAM,EA1CGL,GA2CyBA,GAErCM,GAAUA,EAAMC,QAAU,OAAS,OAExBD,GAAUA,EAAMC,QAAU,OAAS,OAC5CP,GAITM,GACAA,EAAME,OAAN,sFAUSC,EAAW,KAAO,MAAD,EACFC,mBAAS,IAAIC,MADX,mBACrBC,EADqB,KACdC,EADc,KAGtBC,EAAM,IAAIH,KACVI,EAAQC,YAAYC,YAAaL,GAAQ,CAAEM,aAN9B,IAObC,EAAMC,YACVC,YAAUC,YAAWV,GAAQ,CAAEM,aARd,IASjB,EAAIK,YAAgBX,EAAO,CAAEM,aATZ,KAWbM,EAAQC,YAAkB,CAAEV,QAAOI,QAUzC,OACE,kBAACvB,EAAD,KACE,kBAACG,EAAD,KACE,4BAAQ2B,QAPQ,KACpBb,EAASc,YAAUf,EAAO,MAMtB,KACA,kBAACX,EAAD,KACG2B,YAAOhB,EAAO,gBAEjB,4BAAQc,QAfI,KAChBb,EAASgB,YAAUjB,EAAO,MActB,MAEF,kBAACV,EAAD,KACGsB,EAAMM,IAAIC,GACT,kBAAC3B,EAAD,CACE4B,IAAKD,EAAKE,UACV1B,QAAS2B,YAAYH,EAAMnB,GAC3BJ,MAAO2B,YAAUJ,EAAMjB,IAEJ,IAAlBsB,YAAQL,IAAeH,YAAOG,EAAM,OACpCK,YAAQL,Q,kJClHrB,MAAMM,EAAcC,YAAH,KAQF,SAASC,IACtB,OACE,oCACE,kBAACF,EAAD,MACA,kBAAC5B,EAAD,OCXN,MAAM+B,EAAcC,SAASC,eAAe,QAC5CC,iBAAO,kBAACJ,EAAD,MAASC,K","file":"static/js/main.30fa3cea.chunk.js","sourcesContent":["import {\n  addMonths,\n  addWeeks,\n  eachDayOfInterval,\n  endOfMonth,\n  endOfWeek,\n  getDate,\n  isSameDay,\n  isSameMonth,\n  startOfMonth,\n  startOfWeek,\n  subMonths,\n  format,\n  getWeeksInMonth\n} from 'date-fns'\nimport React, { useState } from 'react'\nimport styled from 'styled-components'\n\nconst unit = 20\nconst controlsHeight = unit * 3\n\nconst CalendarContainer = styled.div`\n  height: 100vh;\n  padding: ${unit}px;\n\n  &,\n  * {\n    box-sizing: border-box;\n  }\n`\nconst CalendarControls = styled.div`\n  display: inline-flex;\n  flex-flow: row nowrap;\n  align-items: center;\n  background-color: #fff;\n  width: 100%;\n  height: ${controlsHeight}px;\n  padding-bottom: ${unit}px;\n  button {\n    display: block;\n    height: 100%;\n    width: ${controlsHeight}px;\n  }\n`\nconst CalendarControlsMonth = styled.div`\n  flex: 1 0 auto;\n  padding: 0 ${unit}px;\n  text-align: center;\n`\nconst CalendarDates = styled.ul`\n  display: flex;\n  flex-flow: row wrap;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n`\ntype CalendarDateProps = {\n  inMonth: boolean\n  today: boolean\n}\nconst CalendarDate = styled.li<CalendarDateProps>`\n  flex: 0 0 ${100 / 7}%;\n  height: calc((100vh - ${controlsHeight}px - ${unit * 2}px) / 6);\n  border: #000 solid 1px;\n  color: ${props => (props.inMonth ? '#333' : '#666')};\n  text-align: right;\n  background-color: ${props => (props.inMonth ? '#fff' : '#eee')};\n  padding: ${unit / 2}px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  ${props =>\n    props.today &&\n    `\n    font-weight: bold;\n    border-color: #000;\n    background-color: #bbb;\n  `}\n`\n\nconst weekStartsOn = 1\n\nexport const Calendar = () => {\n  const [month, setMonth] = useState(new Date())\n\n  const now = new Date()\n  const start = startOfWeek(startOfMonth(month), { weekStartsOn })\n  const end = addWeeks(\n    endOfWeek(endOfMonth(month), { weekStartsOn }),\n    6 - getWeeksInMonth(month, { weekStartsOn })\n  )\n  const dates = eachDayOfInterval({ start, end })\n\n  const nextMonth = () => {\n    setMonth(addMonths(month, 1))\n  }\n\n  const previousMonth = () => {\n    setMonth(subMonths(month, 1))\n  }\n\n  return (\n    <CalendarContainer>\n      <CalendarControls>\n        <button onClick={previousMonth}>&lt;</button>\n        <CalendarControlsMonth>\n          {format(month, 'MMMM - yyyy')}\n        </CalendarControlsMonth>\n        <button onClick={nextMonth}>&gt;</button>\n      </CalendarControls>\n      <CalendarDates>\n        {dates.map(date => (\n          <CalendarDate\n            key={date.getTime()}\n            inMonth={isSameMonth(date, month)}\n            today={isSameDay(date, now)}\n          >\n            {getDate(date) === 1 && format(date, 'MMM')}\n            {getDate(date)}\n          </CalendarDate>\n        ))}\n      </CalendarDates>\n    </CalendarContainer>\n  )\n}\n","import React from 'react'\nimport { createGlobalStyle } from 'styled-components'\nimport { Calendar } from './Calendar'\n\nconst GlobalStyle = createGlobalStyle`\n  html, body {\n    margin: 0;\n    padding: 0;\n    height: 100%;\n  }\n`\n\nexport default function App() {\n  return (\n    <>\n      <GlobalStyle />\n      <Calendar />\n    </>\n  )\n}\n","import React from 'react'\nimport { render } from 'react-dom'\n\nimport App from './App'\n\nconst rootElement = document.getElementById('root')\nrender(<App />, rootElement)\n"],"sourceRoot":""}