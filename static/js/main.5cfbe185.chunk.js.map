{"version":3,"sources":["theme.tsx","calendar/CalendarControls.tsx","calendar/CalendarFooter.tsx","calendar/CalendarDates.tsx","calendar/Calendar.tsx","App.tsx","index.tsx"],"names":["theme","fontFamily","fontWeights","light","normal","bold","fontSizes","small","unit","colors","neutral","neutralDark","Container","styled","div","Button","button","Month","CalendarControls","props","value","onChange","more","onClick","subMonths","format","addMonths","$","CalendarFooter","pkg","version","href","target","rel","ul","CalendarDate","li","controlsHeight","inMonth","today","CalendarDates","month","now","Date","start","startOfWeek","startOfMonth","weekStartsOn","end","addWeeks","endOfWeek","endOfMonth","getWeeksInMonth","dates","eachDayOfInterval","map","date","key","getTime","isSameMonth","isSameDay","getDate","CalendarContainer","Calendar","useState","setMonth","GlobalStyle","createGlobalStyle","App","rootElement","document","getElementById","render"],"mappings":"+8BAAO,MAEMA,EAAQ,CACnBC,WAAY,6BACZC,YAAa,CACXC,MAAO,IACPC,OAAQ,IACRC,KAAM,KAERC,UAAW,CACTC,MAAO,GACPH,OAAQ,IAEVI,KAbkB,GAclBC,OAAQ,CACNC,QAAS,UACTC,YAAa,Y,yfCNV,MAEDC,EAAYC,IAAOC,IAAV,IAFeN,GDVV,ICqBdO,EAASF,IAAOG,OAAV,IAXkBR,IAiBxBS,EAAQJ,IAAOC,IAAV,ID3BS,ICsCPI,EAA8CC,IAAU,MAC3DC,EAA6BD,EAA7BC,MAAOC,EAAsBF,EAAtBE,SAAaC,EADsC,YAC7BH,EAD6B,sBAWlE,OACE,kBAACP,EAAcU,EACb,kBAACP,EAAD,CAAQQ,QANU,KACpBF,EAASG,YAAUJ,EAAO,MAKxB,KACA,kBAACH,EAAD,KACGQ,YAAOL,EAAO,gBAEjB,kBAACL,EAAD,CAAQQ,QAdM,KAChBF,EAASK,YAAUN,EAAO,MAaxB,O,6SCjDC,MAEDR,EAAYC,IAAOC,IAAV,IFRK,GEMQN,GAMbmB,GAAKA,EAAE3B,MAAMM,UAAUC,MAErBoB,GAAKA,EAAE3B,MAAME,YAAYG,MAG7BuB,EAAiB,IAE1B,kBAAC,EAAD,SACIC,EAAIC,QADR,cACsB,uBAAGC,KAAK,+BAA+BC,OAAO,SAASC,IAAI,uBAA3D,e,ifCA1B,MAAMrB,EAAYC,IAAOqB,GAAV,KAaTC,EAAetB,IAAOuB,GAAV,IACJ,IAAM,EACMC,IAAqC7B,GAEpDW,GAAUA,EAAMmB,QAAU,OAAS,OAExBnB,GAAUA,EAAMmB,QAAU,OAAS,OAC5C9B,GAITW,GACAA,EAAMoB,OAAN,sFAcSC,EAAwCrB,IAAU,MACrDsB,EAAmBtB,EAAnBsB,MAAUnB,EAD0C,YACjCH,EADiC,WAGtDuB,EAAM,IAAIC,KACVC,EAAQC,YAAYC,YAAaL,GAAQ,CAAEM,aAV9B,IAWbC,EAAMC,YACVC,YAAUC,YAAWV,GAAQ,CAAEM,aAZd,IAajB,EAAIK,YAAgBX,EAAO,CAAEM,aAbZ,KAebM,EAAQC,YAAkB,CAAEV,QAAOI,QAEzC,OACE,kBAAC,EAAc1B,EACZ+B,EAAME,IAAIC,GACT,kBAACrB,EAAD,CACEsB,IAAKD,EAAKE,UACVpB,QAASqB,YAAYH,EAAMf,GAC3BF,MAAOqB,YAAUJ,EAAMd,IAEJ,IAAlBmB,YAAQL,IAAR,UAA0B/B,YAAO+B,EAAM,OAAvC,KACAK,YAAQL,O,8GCvEnB,MAAMM,EAAoBjD,IAAOC,IAAV,IJRH,IIaPiD,EAAW,KAAO,MAAD,EACFC,mBAAS,IAAIrB,MADX,mBACrBF,EADqB,KACdwB,EADc,KAG5B,OACE,kBAACH,EAAD,KACE,kBAAC5C,EAAD,CAAkBE,MAAOqB,EAAOpB,SAAU4C,IAC1C,kBAACzB,EAAD,CAAeC,MAAOA,IACtB,kBAACb,EAAD,Q,+LCdN,MAAMsC,EAAcC,YAAH,IAGOxC,GAAKA,EAAE3B,MAAMS,OAAOC,QAKzBiB,GAAKA,EAAE3B,MAAMC,YAIjB,SAASmE,IACtB,OACE,kBAAC,IAAD,CAAepE,MAAOA,GACpB,kBAACkE,EAAD,MACA,kBAACH,EAAD,OChBN,MAAMM,EAAcC,SAASC,eAAe,QAC5CC,iBAAO,kBAACJ,EAAD,MAASC,K","file":"static/js/main.5cfbe185.chunk.js","sourcesContent":["export const unit = 20\n\nexport const theme = {\n  fontFamily: \"'Noto Sans JP', sans-serif\",\n  fontWeights: {\n    light: 200,\n    normal: 400,\n    bold: 700,\n  },\n  fontSizes: {\n    small: 12,\n    normal: 16,\n  },\n  unit,\n  colors: {\n    neutral: '#f8f9fc',\n    neutralDark: '#474b5c',\n  },\n}\n\ntype Theme = typeof theme\n\ndeclare module 'styled-components' {\n  export interface DefaultTheme extends Theme {}\n}","import {\n  addMonths,\n  subMonths,\n  format\n} from 'date-fns'\nimport React, { FC } from 'react'\nimport styled from 'styled-components'\n\nimport { unit } from '../theme'\n\nexport const controlsHeight = unit * 3\n\nconst Container = styled.div`\n  display: inline-flex;\n  flex-flow: row nowrap;\n  align-items: center;\n  width: 100%;\n  height: ${controlsHeight}px;\n  padding-bottom: ${unit}px;\n`\n\nconst Button = styled.button`\n  display: block;\n  height: 100%;\n  width: ${controlsHeight}px;\n`\n\nconst Month = styled.div`\n  flex: 1 0 auto;\n  padding: 0 ${unit}px;\n  text-align: center;\n`\n\ntype CalendarControlsProps = {\n  value: Date\n  onChange: (value: Date) => void\n}\n\nexport const CalendarControls: FC<CalendarControlsProps> = props => {\n  const { value, onChange, ...more } = props\n\n  const nextMonth = () => {\n    onChange(addMonths(value, 1))\n  }\n\n  const previousMonth = () => {\n    onChange(subMonths(value, 1))\n  }\n\n  return (\n    <Container {...more}>\n      <Button onClick={previousMonth}>&lt;</Button>\n      <Month>\n        {format(value, 'MMMM - yyyy')}\n      </Month>\n      <Button onClick={nextMonth}>&gt;</Button>\n    </Container>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport pkg from '../../package.json'\nimport { unit } from './../theme'\n\nexport const footerHeight = unit * 2\n\nconst Container = styled.div`\n  text-align: center;\n  padding-top: ${unit}px;\n  height: ${footerHeight}px;\n  font-size: ${$ => $.theme.fontSizes.small}px;\n  text-transform: uppercase;\n  font-weight: ${$ => $.theme.fontWeights.bold};\n`\n\nexport const CalendarFooter = () => {\n  return (\n    <Container>\n      v{pkg.version} â€¢ by <a href=\"https://github.com/rmariuzzo\" target=\"_blank\" rel=\"noopener noreferrer\">@rmariuzzo</a>\n    </Container>\n  )\n}\n","import {\n  addWeeks,\n  eachDayOfInterval,\n  endOfMonth,\n  endOfWeek,\n  getDate,\n  isSameDay,\n  isSameMonth,\n  startOfMonth,\n  startOfWeek,\n  format,\n  getWeeksInMonth\n} from 'date-fns'\nimport React, { FC } from 'react'\nimport styled from 'styled-components'\n\nimport { unit } from './../theme'\nimport { controlsHeight } from './CalendarControls'\nimport { footerHeight } from './CalendarFooter'\n\nconst Container = styled.ul`\n  display: flex;\n  flex-flow: row wrap;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n`\n\ntype CalendarDateProps = {\n  inMonth: boolean\n  today: boolean\n}\n\nconst CalendarDate = styled.li<CalendarDateProps>`\n  flex: 0 0 ${100 / 7}%;\n  height: calc((100vh - ${controlsHeight + footerHeight}px - ${unit * 2}px) / 6);\n  border: #000 solid 1px;\n  color: ${props => (props.inMonth ? '#333' : '#666')};\n  text-align: right;\n  background-color: ${props => (props.inMonth ? '#fff' : '#eee')};\n  padding: ${unit / 2}px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  ${props =>\n    props.today &&\n    `\n    font-weight: bold;\n    border-color: #000;\n    background-color: #bbb;\n  `}\n`\n\nconst weekStartsOn = 1\n\ntype CalendarDatesProps = {\n  month: Date\n}\n\nexport const CalendarDates: FC<CalendarDatesProps> = props => {\n  const { month, ...more } = props\n\n  const now = new Date()\n  const start = startOfWeek(startOfMonth(month), { weekStartsOn })\n  const end = addWeeks(\n    endOfWeek(endOfMonth(month), { weekStartsOn }),\n    6 - getWeeksInMonth(month, { weekStartsOn })\n  )\n  const dates = eachDayOfInterval({ start, end })\n\n  return (\n    <Container {...more}>\n      {dates.map(date => (\n        <CalendarDate\n          key={date.getTime()}\n          inMonth={isSameMonth(date, month)}\n          today={isSameDay(date, now)}\n        >\n          {getDate(date) === 1 && `${format(date, 'MMM')} `}\n          {getDate(date)}\n        </CalendarDate>\n      ))}\n    </Container>\n  )\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\n\nimport { unit } from './../theme'\nimport { CalendarControls } from './CalendarControls'\nimport { CalendarDates } from './CalendarDates'\nimport { CalendarFooter } from './CalendarFooter'\n\nconst CalendarContainer = styled.div`\n  height: 100vh;\n  padding: ${unit}px;\n`\n\nexport const Calendar = () => {\n  const [month, setMonth] = useState(new Date())\n\n  return (\n    <CalendarContainer>\n      <CalendarControls value={month} onChange={setMonth} />\n      <CalendarDates month={month} />\n      <CalendarFooter />\n    </CalendarContainer>\n  )\n}\n","import React from 'react'\nimport { createGlobalStyle, ThemeProvider } from 'styled-components'\n\nimport { Calendar } from './calendar/Calendar'\nimport { theme } from './theme'\n\nconst GlobalStyle = createGlobalStyle`\n  html,\n  body {\n    background-color: ${$ => $.theme.colors.neutral};\n  }\n\n  * {\n    box-sizing: border-box;\n    font-family: ${$ => $.theme.fontFamily};\n  }\n`\n\nexport default function App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <Calendar />\n    </ThemeProvider>\n  )\n}\n","import 'normalize.css'\nimport React from 'react'\nimport { render } from 'react-dom'\n\nimport App from './App'\n\nconst rootElement = document.getElementById('root')\nrender(<App />, rootElement)\n"],"sourceRoot":""}